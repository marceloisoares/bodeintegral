{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p> <p> </p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#code-annotation-examples","title":"Code annotation examples:","text":""},{"location":"#code-blocks","title":"Code blocks:","text":"<p>Some 'code' goes here \\(f = y(x)\\)</p> <pre><code>import tensorflow as tf\n</code></pre> A code snippet<pre><code>function [out] = myFunction(argA,argB)\n    for iA = 1 : length(argB)\n        % This is a comment\n        out(iA) = argA * 2;\n    end\nend\n</code></pre> <p>A simple equation: $$ a = b_c $$</p> <p>The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\), because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\).</p> <p></p>"},{"location":"about/","title":"Postquam forti cruentum iam Theseus","text":"<p>Index page</p> <p>My first post</p>"},{"location":"about/#dictis-neci-opera","title":"Dictis neci opera","text":"<p>Lorem markdownum dixit latera Cypron, dato inquit; facis nubes cui. Soceri Dauni: flammas corpus; coniuge Vestaque vulnere crine. Ara cursu delet. Fortibus in vidit non per! Servire armata nulla repletum animosque labitur, vulnere unguibus hanc est accipit mors.</p> <ul> <li>Se locis fuimusve instat procul quamquam Dircen</li> <li>Oneris tale</li> <li>Quicumque notissima fertur tamen facta micant</li> <li>Leges si passim et iam adhaesit bis</li> <li>Mundo tuta elementa gaudet manuque</li> <li>Intus conveniunt solus</li> </ul> <p>Thalamis et quamvis numina; dixit conciperet firmatque si locuta conlegit aquas iacent iugo, non caelo. Diversa arguitur nominibus acumine petit, ante ritu natura posse, quo in, dignam sine. Studiis cunarum, non est vivo reposcunt vos fama opacas mediis vero umbramque. Ego fugit regebat.</p>"},{"location":"about/#est-undis-patriosque-mihi-iuvenale-misisset-moles","title":"Est undis patriosque mihi iuvenale misisset moles","text":"<p>Fonte posuerunt natale pedum abstulit. Huic iam vocat, iam nata omnes laniatum hasta adspicere. Quamvis perque heres patet illa, prensamque summo, duxerat molles perstat narravere multa, amicior?</p> <p>Puellae gravemque quaesita cur sive in fuit auras platanus tenuit, si faciem praecipue in lassos Aesarei autumnos. Claro pariterque matre Phrygiis ille promere multorum, magicae quarum! Hunc illum: me Latio retenta tantique exilio micantes crudele erit clarum lustrat. Negare et Vesta frater, et operisque fundere, Danais rumpe; Argus!</p> <p>Procul arbor tua captis ipse ambiguus saepe. Inmemores ducibusque molli an capi.</p> <p>Sic silvas atque pecudesque iners, terra manat ea premeret, de parat caelum est gemino mihi ista Ixione! Tamen vestigia sua nulla que refers, pectore, lacrimis sonat. Nec nunc, nobilis quoque sequentem fassoque furialibus ictus Metione utque utile. Pernocte manibusque gregesque capite medii placidissime signum pater ad sensimus at rogabo cadunt pellem.</p>"},{"location":"blog/2024/06/17/matlab-scripting-guidelines/","title":"Matlab scripting guidelines","text":""},{"location":"blog/2024/06/17/matlab-scripting-guidelines/#introduction","title":"Introduction","text":"<p>This style guide introduces the preferred coding conventions for Matlab scripting used by this blog. </p>"},{"location":"blog/2024/06/17/matlab-scripting-guidelines/#code-layout","title":"Code layout","text":"<p>Maximum line length:</p> <ul> <li>Avoid exceeding a maximum number of 79 characters;</li> <li>Consider using line continuation for long command lines;</li> </ul> <p>Indentation:</p> <ul> <li>Use 4 spaces per indentation level</li> </ul> Indentation (Example 1)<pre><code>[out1, out2] = function myFunction(argA, argB, argC)\n    if(argA)\n        out1 = argB;\n        out2 = argC;\n    end\nend\n</code></pre> <p>If the function call results in a long statement, consider aligning inputs/outputs arguments to avoid exceeding 79 characters:</p> Indentation (Example 2)<pre><code>foo = funcWithVeryLongName(argA,...\n                           argB,...\n                           argC);\n</code></pre> Indentation (Example 3)<pre><code>[outLongVar1,...\n        out2,...\n    outName3] = funcWithVeryLongName(argA,...\n                                     argB,...\n                                     argC);\n</code></pre> <p>If the statement is very long, consider aligning operators to avoid exceeding 79 characters:</p> Indentation (Example 4)<pre><code>result = operatorA * (operatorB + ...\n                      operatorC + ...\n                      operatorD);\n</code></pre> <p>Blank lines</p> <ul> <li>Use blank lines in functions, sparingly, to indicate logical sections.</li> </ul> <p>White space</p> <ul> <li>General rule: After commas, around operators.</li> </ul> <p>Operator precedence</p> <ul> <li>Consider using parenthesis to organize logical statements.</li> </ul> <p>Imports</p> <p>Sometimes function calls can get very long, especially if the function is within a namespace:</p> Imports (Example 1)<pre><code>[out1, out2] = namespaceA.subNamespace.functionName(argA,...\n                                                    argB);\n</code></pre> <p>If that is the case, consider importing it in a separate line; Make the import close to where it is used;</p> Imports (Example 2)<pre><code>import namespaceA.subNamespace.functionName\n[out1, out2] = functionName(argA,argB);\n</code></pre> <p>Comments</p> <ul> <li>Use comments to explain \"why\", not \"how\";</li> <li>Make \"what\" and \"how\" explicit using the code itself;</li> <li>Use inline comments sparingly:<ul> <li>They are distracting - but sometimes necessary;</li> <li>Align comments to improve readability;</li> </ul> </li> <li>The best comment is a code that explains itself;</li> <li>Use %% to group logical section;</li> </ul> Comments (Could be better)<pre><code>a = 2.0; % Acceleration in m/s2\nb = 1.0; % Mass in kg\nm = b * a; % Force in Newtons\nn = a^3 + b^2 + c; % Random equation\n</code></pre> Comments (More appropriate)<pre><code>% Force using Second Newton's law:\nforce_N = mass_kg * accel_mps2;\n</code></pre>"},{"location":"blog/2024/06/17/matlab-scripting-guidelines/#naming-convention","title":"Naming convention","text":"<p>Style</p> <ul> <li>Constants:<ul> <li>UPPER_CASE_WITH_UNDERSCORE</li> </ul> </li> <li>Functions (camelCase):<ul> <li>getNumberPages</li> </ul> </li> <li>Classes (CamelCase):<ul> <li>TestCaseWrapper</li> </ul> </li> <li>Objects(CamelCase):<ul> <li>MyObject</li> </ul> </li> <li>Packages:<ul> <li>packagesname</li> </ul> </li> <li>Engineering variables:<ul> <li>varName_unit</li> </ul> </li> </ul> <p>Units</p> <p>Indicate units explicity:</p> <ul> <li>force_N;</li> <li>mass_kg;</li> <li>accel_mps2;</li> <li>vel_mps;</li> <li>dist_m;   </li> </ul> <p>Used more often:</p> Unit Suffix degree _deg degree per second _degs feet _ft hertz _hz kilograms _kg knot _kt meter _m \\(m/s\\) _mps \\(m/s^2\\) _mps2 newton _N pound _lb radian _rad radian per second _rads second _s <p>Iterators</p> <p>Name iterators according to what you are iterating over:</p> <ul> <li>E.g.: iSpeed, iAlt</li> </ul> Iterators<pre><code>for iSpeed = 1 : numel(speedMatrix)\n    # Do your thing\nend\n</code></pre> <p>Descriptive names</p> <p>Use name to express meaning:</p> <ul> <li>forceBodyAxis_N</li> </ul> <p>Avoid excessively long names:</p> <ul> <li>saturationUpperBoundary_deg</li> </ul> <p>How long should a name be:</p> <ul> <li>As long as necessary to immediately recognize what the variable is about:</li> <li>However:<ul> <li>Short names are more appropriate for small scopes</li> <li>For a large scope, consider a more descriptive name (potentially longer)</li> </ul> </li> </ul>"},{"location":"blog/2024/06/17/matlab-scripting-guidelines/#function-arguments","title":"Function arguments:","text":"<p>Description</p> Function arguments<pre><code>function force_N = getForce(mass_kg, accel_mps2)\n% [Description]:\n%   - Calculates resulting force using Second Newton's law.\n% [Inputs]:\n%   - mass_kg: Body Mass\n%   - accel_mps2: Body acceleration\n% [Outputs]:\n%   - force_N: resulting Force\n\nforce_N = mass_kg .* accel_mps2;\n\nend\n</code></pre> <p>If you are using optional arguments:</p> Function arguments with options<pre><code>function force_N = getForce(mass_kg, accel_mps2,varargin)\n% [Description]:\n%   - Calculates resulting force using Second Newton's law.\n% [Inputs]:\n%   - mass_kg: Body Mass\n%   - accel_mps2: Body acceleration\n% [Optional arguments]:\n%   - optionA: Description option A;\n%   - optionB: Description option B;\n% [Outputs]:\n%   - force_N: resulting Force\n\nDo your thing\n\nend\n</code></pre> <p>Scalar or array</p> <ul> <li>Prepare functions to receive both scalar or array**</li> </ul> <p>Example 1: Scalar or array<pre><code>function force_N = getForce(mass_kg, accel_mps2)\n    force_N = mass_kg .* accel_mps2;\nend\n</code></pre> Complexity</p> <p>Functions should have a single responsibility:</p> <ul> <li>E.g. A plotting function should plot (not convert multiple units, extract frequency response, etc.)</li> </ul> <p>Optional arguments</p> <ul> <li>Use the same matlab convention if you need optinal arguments;</li> </ul> Options<pre><code>out = funcWithOptions(arg1,...\n                      arg2,...\n                      'option1',1.0,...\n                      'option2',1.0,...\n                      'option3',1.0)\n</code></pre> <p>Argument consistency</p> <ul> <li>There should be only one way to provide an argument.</li> </ul> <p>The function interface is a contract:</p> <ul> <li>Use the function description to define acceptable inputs;</li> <li>If the user disrespect the contract, an Error should not pass silently.</li> </ul>"},{"location":"projects/Project1_msim/","title":"mSim: Simulation framework","text":"<p>Last update: July 29th, 2024</p>"},{"location":"projects/Project1_msim/#introduction","title":"Introduction","text":"<p>The following post describes mSim, a simulation framework used throughout this blog. It implements provides simulation capabilities similar to those offered by the simulink environment. It is, however, entirely programmatic. </p> <p>This environment was develop for the following reasons:</p> <ul> <li>Simulink restriction:<ul> <li>Home license limits number of blocks to approximately a 1000 blocks (when this project was originally posted in 2024);</li> <li>I wouldn't be able to develop more sophisticated projects with this constraint;</li> </ul> </li> <li>Flexibility:<ul> <li>Possibility to create/destroy objects dynamically (E.g. a given object can emerge during a simulation and disapper when it is not longer needed);</li> <li>Integrate simulation environment with more sophisticated tools (E.g. Machine learning, sensor fusion, etc.)</li> </ul> </li> <li>Programming language:<ul> <li>Seemslessly integrate the same framework in other programming languages;</li> </ul> </li> <li>Personal interest:<ul> <li>Use the simulation framework as a platform to develop my programming skills.</li> </ul> </li> </ul>"},{"location":"projects/Project1_msim/#requirements","title":"Requirements","text":"<p>The mSim framework was developed with the following requirements in mind:</p>"},{"location":"projects/Project1_msim/#basic-types","title":"Basic types:","text":"<ol> <li>The framework shall offer the same basic blocks as Simulink:<ul> <li>Inport/Outport, Constant, Gain, Unit Delay, Product, Sum, Integrator, Transfer function, State space, Logical gate, Rational, Switch, Rate limiter, etc.</li> </ul> </li> <li>The framework shall offer logical, int32, and double as basic data types;</li> <li>The framework shall offer a User defined block:<ul> <li>the user will provide a function with \\(u_r\\) inputs and \\(y_n\\) outputs, where \\(r,n\\) are integers numbers greater than or equal to zero;</li> <li>each function input will have one of the basic data types (boolean, int32, double);</li> <li>the inports and outputs will be created automatically and named as \\(u_1,u_2,...,u_r\\), \\(y_1,y_2,...,y_n\\)</li> </ul> </li> </ol>"},{"location":"projects/Project1_msim/#connectivity","title":"Connectivity","text":"<ol> <li>The framework shall offer a helper method to connect individually the inports of one block to the Outport of another block (similar to connection line in Simulink);</li> <li>The framework shall allow multiple Inports to be connected to be connected to each Outport;</li> </ol>"},{"location":"projects/Project1_msim/#simulation","title":"Simulation","text":"<ol> <li>The framework shall perform the simulation in two steps:<ul> <li>Output: Ask each block to calculate its outputs; </li> <li>Update: Ask each block to update its states for the next execution;</li> </ul> </li> <li>The framework shall allow the user do define which integration method will be used;</li> <li>The framework will offer a 500Hz top-level execution rate:<ul> <li>The user is able to down-sample to other frequencies multiples of the same sample time (E.g. 100Hz, 50Hz, etc.)</li> </ul> </li> <li>Each block shall call output/update methods of its respective sub-blocks; </li> <li>The framework shall allow the user do define the execution order;</li> <li>The framework shall allow the user to explicity define the Initial State;</li> <li>The framework shall offer a discrete solver with not continuous states;</li> </ol>"},{"location":"projects/Project1_msim/#architecture","title":"Architecture","text":""},{"location":"projects/Project1_msim/#ports","title":"Ports:","text":"<p>Inports and Outports are specializations of the Port class. The primary difference between these two types is the fact that Inports do not have a method to set its internal value. Its implementation pulls the </p> <pre><code>classDiagram\n    class Port{\n        &lt;&lt;Abstract&gt;&gt;\n        -String name\n        -String dataType\n        -Block parent\n        +getValue()\n        +connectTo(Port source)\n    }\n    class Inport\n    class Outport{\n    -DataType value\n    +setValue()\n    }\n    Port &lt;|-- Inport\n    Port &lt;|-- Outport</code></pre> <p>Suppose we want to connect Inport [inA] of subsystem A to Outport [outB] of subsystem B. This is the proposed syntax:  <pre><code>inA = mSim.block.Inport('inA',... name\n                        'double',... type\n                        systemA); % parent\n\noutB = mSim.block.Outport('outB',... name\n                          'double',... type\n                          systemA); % parent\n\n% Connect [inport A] to [outport B]:\ninA.connectTo(outB);\n</code></pre></p>"},{"location":"projects/Project1_msim/#blocks","title":"Blocks","text":"<pre><code>---\ntitle: Block\n---\nclassDiagram\n    class Block{\n        &lt;&lt;Abstract&gt;&gt;\n        +String name\n        +String dataType\n        +String blockType\n        +Port inports\n        +Port outports\n        +State states\n        +Block subBlocks\n        +Block parent\n        +output()*\n        +update()*\n        +getOutport(String name)\n        +setOutport(String name,DataType value)\n        +getInport(String name)\n        +connect(String portName,Port source)\n    }\n    style Block fill:#FFFDFE,stroke:#031E49</code></pre> <pre><code>---\ntitle: Block\n---\nclassDiagram\n    class Block{\n        &lt;&lt;Abstract&gt;&gt;\n        +String name\n        +String dataType\n        +String blockType\n        +Port inports\n        +Port outports\n        +State states\n        +Block subBlocks\n        +Block parent\n        +output()*\n        +update()*\n        +getOutport(String name)\n        +setOutport(String name,DataType value)\n        +getInport(String name)\n        +connect(String portName,Port source)\n    }\n    style Block fill:#FFFDFE,stroke:#031E49</code></pre>"},{"location":"projects/Project1_msim/#testing","title":"Testing:","text":""},{"location":"projects/Project1_msim/#example-1","title":"Example 1:","text":""},{"location":"projects/Project2_propeller/","title":"Propeller","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"projects/Project3_p51/","title":"P51 mustang","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"blog/archive/2024/","title":"2024","text":""}]}